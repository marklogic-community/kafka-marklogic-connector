plugins {
    id 'java'
    id 'net.saliman.properties' version '1.4.6'
    id "com.github.jk1.dependency-license-report" version "1.3"
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    documentation
    assets
}

dependencies {
    compileOnly "org.apache.kafka:connect-api:2.5.0"
    compileOnly "org.apache.kafka:connect-json:2.5.0"

    compile ("com.marklogic:marklogic-data-hub:5.2.2") {
        // Excluding these because there's no need for them
        exclude module: "spring-boot-autoconfigure"
        exclude module: "spring-integration-http"
        exclude module: "jaeger-core"
        exclude module: "jaeger-thrift"

        // Excluding because it causes Kafka Connect to complain mightily if included
        exclude module: "logback-classic"
    }

    testCompile "org.junit.jupiter:junit-jupiter-api:5.3.0"
    testCompile "org.apache.kafka:connect-api:2.5.0"
    testCompile "org.apache.kafka:connect-json:2.5.0"

    // Needed by Gradle 4.6+ - see https://www.petrikainulainen.net/programming/testing/junit-5-tutorial-running-unit-tests-with-gradle/
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.3.0"

    // Forcing logback to be used for test logging
    testRuntime "ch.qos.logback:logback-classic:1.1.8"
    testRuntime group: "org.slf4j", name: "jcl-over-slf4j", version: "1.7.22"
    testRuntime group: "org.slf4j", name: "slf4j-api", version: "1.7.22"

    documentation files('LICENSE.txt')
    documentation files('NOTICE.txt')
    documentation files('README.md')

    assets files('MarkLogic_logo.png')
    assets files('apache_logo.png')
}

// Needed by Gradle 4.6+ - see https://www.petrikainulainen.net/programming/testing/junit-5-tutorial-running-unit-tests-with-gradle/
test {
    useJUnitPlatform()
}

// Customize the Java plugin's jar task to produce a "fat" jar with all dependencies included
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task copyJarToKafka(type: Copy) {
    description = "Used for local development and testing; copies the jar to your local Kafka install"
    from "build/libs"
    into "${kafkaHome}/libs"
}
copyJarToKafka.mustRunAfter(jar)

task copyPropertyFilesToKafka(type: Copy) {
    description = "Used for local development and testing; copies the properties files to your local Kafka install"
    from "config"
    into "${kafkaHome}/config"
}

task deploy {
    description = "Used for local development and testing; builds the jar and copies it and the properties files to your local Kafka install"
    dependsOn = ["jar", "copyJarToKafka", "copyPropertyFilesToKafka"]
}

// Tasks for building the archive required for submitting to the Confluence Connector Hub
import org.apache.tools.ant.filters.*
def baseArchiveBuildDir = "build/connectorArchive"
def baseArchiveName = "${componentOwner}-${componentName}-${version}"
task connectorArchive_CopyManifestToBuildDirectory(type: Copy) {
    description = "Copy the project manifest into the root folder"
    group = 'connector archive'

    from '.'
    include 'manifest.json'
    into "${baseArchiveBuildDir}/${baseArchiveName}"
    filter(ReplaceTokens, tokens:[CONFLUENT_USER:componentOwner, VERSION:version])
}

task connectorArchive_CopyAssetsToBuildDirectory(type: Copy) {
    description = "Copy the project assets into the assets folder"
    group = 'connector archive'

    from configurations.assets
    into "${baseArchiveBuildDir}/${baseArchiveName}/assets"
}

task connectorArchive_CopyEtcToBuildDirectory(type: Copy) {
    description = "Copy the project support files into the etc folder"
    group = 'connector archive'

    from 'config'
    include '*'
    into "${baseArchiveBuildDir}/${baseArchiveName}/etc"
}

task connectorArchive_CopyDocumentationToBuildDirectory(type: Copy) {
    description = "Copy the project documentation into the doc folder"
    group = 'connector archive'

    from configurations.documentation
    into "${baseArchiveBuildDir}/${baseArchiveName}/doc"
}

task connectorArchive_CopyDependenciesToBuildDirectory(type: Copy) {
    description = "Copy the dependency jars into the lib folder"
    group = 'connector archive'
    dependsOn = [jar]

    from jar
    from configurations.compile
    into "${baseArchiveBuildDir}/${baseArchiveName}/lib"
}

task connectorArchive_BuildDirectory() {
    description = "Build the directory that will be used to create the Kafka Connector Archive"
    dependsOn = [connectorArchive_CopyManifestToBuildDirectory,
                 connectorArchive_CopyDependenciesToBuildDirectory,
                 connectorArchive_CopyDocumentationToBuildDirectory,
                 connectorArchive_CopyEtcToBuildDirectory,
                 connectorArchive_CopyAssetsToBuildDirectory]
    group = 'connector archive'
}

task connectorArchive(type: Zip, dependsOn: connectorArchive_BuildDirectory) {
    description = 'Build a Connector Hub for the Confluent Connector Hub'
    group = 'connector archive'

    from "${baseArchiveBuildDir}"
    include '**/*'
    archiveName "${baseArchiveName}.zip"
    destinationDir(file('build/distro'))
}
